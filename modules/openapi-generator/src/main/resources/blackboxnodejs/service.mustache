'use strict';

import {autowiredService} from 'blackbox-ioc'
import { trimToDepth, verboseResponse } from 'blackbox-services';

class {{baseName}}ServiceWrapper {
  @autowiredService('{{classVarName}}-service')
  service: any
}
const {{classVarName}}Wrapper = new {{baseName}}ServiceWrapper()

{{#operations}}
{{#operation}}

/**
 {{#summary}}
 * {{{summary}}}
 {{/summary}}
 {{#notes}}
 * {{{notes}}}
 {{/notes}}
 *
{{#allParams}}
 * {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
 * no response value expected for this operation
{{/returnType}}
{{#returnType}}
 * returns {{{returnType}}}
{{/returnType}}
 **/
exports.{{{operationId}}} = async function({{#allParams}}{{paramName}}:any{{#hasMore}},{{/hasMore}}{{/allParams}}) {
  try {
    // Call service provider for {{{operationId}}}:
    let val = await Promise.resolve({{classVarName}}Wrapper.service.{{{operationId}}}({
      {{#allParams}}{{paramName}}:{{paramName}}{{#hasMore}},
      {{/hasMore}}{{/allParams}}
    }))

    {{#vendorExtensions.verbose}}
    val = verboseResponse(val, verbose)
    {{/vendorExtensions.verbose}}
    {{#vendorExtensions.depth}}
    val = trimToDepth(val, depth)
    {{/vendorExtensions.depth}}
    return val
  }
  catch(err) {
    console.error(err)
    if(typeof err === 'string')
      return err

    if(err instanceof Error)
      return {
        error:{
          name:err.name,
          description:err.message
        }
      }
    else
      return {
        error:err
      }
  }

  // Return value:
  {{#returnType}}
  /* TODO: Allow for examples when using OPTIONS or
  var examples = {};
  {{#examples}}
  examples['{{contentType}}'] = {{{example}}};
  {{/examples}}
  if (Object.keys(examples).length > 0) {
    resolve(examples[Object.keys(examples)[0]]);
  } else {
    resolve();
  }
  */
  {{/returnType}}
}

{{/operation}}
{{/operations}}
