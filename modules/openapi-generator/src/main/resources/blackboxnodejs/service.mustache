'use strict';

import {autowiredService} from 'blackbox-ioc'

class {{baseName}}ServiceWrapper {
  @autowiredService('{{classVarName}}-service')
  service: any
}
const {{classVarName}}Wrapper = new {{baseName}}ServiceWrapper()

{{#operations}}
{{#operation}}

/**
 {{#summary}}
 * {{{summary}}}
 {{/summary}}
 {{#notes}}
 * {{{notes}}}
 {{/notes}}
 *
{{#allParams}}
 * {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
 * no response value expected for this operation
{{/returnType}}
{{#returnType}}
 * returns {{{returnType}}}
{{/returnType}}
 **/
exports.{{{operationId}}} = function({{#allParams}}{{paramName}}:any{{#hasMore}},{{/hasMore}}{{/allParams}}) {
  return new Promise(function(resolve, reject) {
    // Call service provider for {{{operationId}}}:
    try {
      resolve({{classVarName}}Wrapper.service.{{{operationId}}}({
        {{#allParams}}{{paramName}}:{{paramName}}{{#hasMore}},
        {{/hasMore}}{{/allParams}}
      }))
    }
    catch(err) {
      console.error(err)
      if(typeof err === 'string')
        reject(err)

      if(err instanceof Error)
        reject({
          error:{
            name:err.name,
            description:err.message
          }
        })
      else
        reject({error:err})
    }

    // Return value:
    {{#returnType}}
    /* TODO: Allow for examples when using OPTIONS or
    var examples = {};
    {{#examples}}
    examples['{{contentType}}'] = {{{example}}};
    {{/examples}}
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
    */
    {{/returnType}}
    {{^returnType}}
    resolve();
    {{/returnType}}
  });
}

{{/operation}}
{{/operations}}
