'use strict';

import {autowiredService} from 'blackbox-ioc'
import { trimToDepth, verboseResponse } from 'blackbox-services';

class {{baseName}}ServiceWrapper {
  @autowiredService('{{classVarName}}-service')
  service: any
}
const {{classVarName}}Wrapper = new {{baseName}}ServiceWrapper()

function strip__(target: any): any {
  if(Array.isArray(target)) {
    return target.map(strip__)
  } else {
    const ret:any = {}
    Object.keys(target).forEach(key => {
      if(!key.startsWith('__'))
        ret[key] = target[key]
    })
    return ret
  }
}

function convertBooleanParameter(val:any):boolean {
  if(val === 'false')
       return false;
  if(val === '')
     return true;
  return val
}

{{#operations}}
{{#operation}}

/**
 {{#summary}}
 * {{{summary}}}
 {{/summary}}
 {{#notes}}
 * {{{notes}}}
 {{/notes}}
 *
{{#allParams}}
 * {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
 * no response value expected for this operation
{{/returnType}}
{{#returnType}}
 * returns {{{returnType}}}
{{/returnType}}
 **/
exports.{{{operationId}}} = async function({{#allParams}}{{paramName}}:any{{#hasMore}},{{/hasMore}}{{/allParams}}) {
  {{#vendorExtensions.verbose}}
  verbose = convertBooleanParameter(verbose)
  {{/vendorExtensions.verbose}}

  // Call service provider for {{{operationId}}}:
  let val = await Promise.resolve({{classVarName}}Wrapper.service.{{{operationId}}}({
    {{#allParams}}{{paramName}}:{{paramName}}{{#hasMore}},
    {{/hasMore}}{{/allParams}}
  }))

  {{#vendorExtensions.verbose}}
  val = verboseResponse(val, verbose)
  {{/vendorExtensions.verbose}}
  {{#vendorExtensions.depth}}
  val = trimToDepth(val, depth)
  {{/vendorExtensions.depth}}
  return strip__(val)

  // Return value:
  {{#returnType}}
  /* TODO: Allow for examples when using OPTIONS or
  var examples = {};
  {{#examples}}
  examples['{{contentType}}'] = {{{example}}};
  {{/examples}}
  if (Object.keys(examples).length > 0) {
    resolve(examples[Object.keys(examples)[0]]);
  } else {
    resolve();
  }
  */
  {{/returnType}}
}

{{/operation}}
{{/operations}}
